08.04 12:00 PM
1. #include <stdio.h>


#define INF 999
#define MAX 100

int p[MAX], c[MAX][MAX], t[MAX][2];

int find(int v) {
    return p[v] ? p[v] = find(p[v]) : v;
}

void union1(int i, int j) {
    p[j] = i;
}

void kruskal(int n) {
    int i, j, k, u, v, min, res1, res2, sum = 0;
    for (k = 1; k < n; k++) {
        min = INF;
        for (i = 1; i <= n; i++) {
            for (j = 1; j <= n; j++) {
                if (i != j && c[i][j] < min && (u = find(i)) != (v = find(j))) {
                    res1 = i;
                    res2 = j;
                    min = c[i][j];
                }
            }
        }
        union1(find(res1), find(res2));
        t[k][0] = res1;
        t[k][1] = res2;
        sum += min;
    }
    printf("\nCost of spanning tree: %d\nEdges of spanning tree:\n", sum);
    for (i = 1; i < n; i++)
        printf("%d -> %d\n", t[i][0], t[i][1]);
}

int main() {
    int i, j, n;
    printf("Enter the number of nodes: ");
    scanf("%d", &n);
    for (i = 1; i <= n; i++)
        p[i] = 0;
    printf("Enter the graph data:\n");
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            scanf("%d", &c[i][j]);
    kruskal(n);
    return 0;
}
--------
2.#include <stdio.h>
#define INF 999

int prim(int c[10][10], int n, int s) {
    int v[10] = {0}, ver[10], d[10], sum = 0, i, j, min, u;
    for (i = 1; i <= n; i++) {
        ver[i] = s;
        d[i] = c[s][i];
    }
    v[s] = 1;

    for (i = 1; i < n; i++) {
        min = INF;
        for (j = 1; j <= n; j++)
            if (!v[j] && d[j] < min) {
                min = d[j];
                u = j;
            }
        v[u] = 1;
        sum += d[u];
        printf("\n%d -> %d sum=%d", ver[u], u, sum);
        for (j = 1; j <= n; j++)
            if (!v[j] && c[u][j] < d[j]) {
                d[j] = c[u][j];
                ver[j] = u;
            }
    }
    return sum;
}

int main() {
    int c[10][10], n, s, i, j;
    printf("Enter n value: ");
    scanf("%d", &n);
    printf("Enter the graph data:\n");
    for (i = 1; i <= n; i++)
        for (j = 1; j <= n; j++)
            scanf("%d", &c[i][j]);
    printf("Enter the source node: ");
    scanf("%d", &s);
    printf("\nCost=%d", prim(c, n, s));
    return 0;
}
----------
3.a. #include <stdio.h>
#define INF 999

void floyd(int p[10][10], int n) {
    int i, j, k;
    for (k = 0; k < n; k++)
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                if (p[i][j] > p[i][k] + p[k][j])
                    p[i][j] = p[i][k] + p[k][j];
}

int main() {
    int a[10][10], n, i, j;
    printf("Enter n value: ");
    scanf("%d", &n);
    printf("Enter the graph data:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            scanf("%d", &a[i][j]);
    floyd(a, n);
    printf("\nShortest path matrix\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++)
            printf("%d ", a[i][j]);
        printf("\n");
    }
    return 0;
}
-------------
3.b #include <stdio.h>

void warsh(int p[10][10], int n) {
    for (int k = 0; k < n; k++)
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                p[i][j] = p[i][j] || (p[i][k] && p[k][j]);
}

int main() {
    int a[10][10], n;
    printf("Enter n value: ");
    scanf("%d", &n);
    printf("Enter the graph data:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &a[i][j]);
    warsh(a, n);
    printf("\nResultant path matrix\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            printf("%d ", a[i][j]);
        printf("\n");
    }
    return 0;
}
------------
4.#include <stdio.h>
#define INF 999

void dijkstra(int c[10][10], int n, int s, int d[10]) {
    int v[10] = {0}, min, u;
    for (int i = 0; i < n; i++) {
        d[i] = c[s][i];
    }
    v[s] = 1;

    for (int i = 0; i < n - 1; i++) {
        min = INF;
        for (int j = 0; j < n; j++)
            if (!v[j] && d[j] < min) {
                min = d[j];
                u = j;
            }
        v[u] = 1;
        for (int j = 0; j < n; j++)
            if (!v[j] && d[u] + c[u][j] < d[j])
                d[j] = d[u] + c[u][j];
    }
}

int main() {
    int c[10][10], d[10], n, s;
    printf("Enter n value: ");
    scanf("%d", &n);
    printf("Enter the graph data:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &c[i][j]);
    printf("Enter the source node: ");
    scanf("%d", &s);
    dijkstra(c, n, s, d);
    for (int i = 0; i < n; i++)
        printf("Shortest distance from %d to %d is %d\n", s, i, d[i]);
    return 0;
}
----------
5. #include <stdio.h>

int temp[10], k = 0;

void sort(int a[10][10], int id[10], int n) {
    for (int i = 0; i < n; i++) {
        if (id[i] == 0) {
            id[i] = -1;
            temp[k++] = i;
            for (int j = 0; j < n; j++) {
                if (a[i][j] == 1 && id[j] != -1)
                    id[j]--;
            }
            i = -1; // restart the loop
        }
    }
}

int main() {
    int a[10][10], id[10] = {0}, n;
    printf("Enter n value: ");
    scanf("%d", &n);
    printf("Enter the graph data:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++) {
            scanf("%d", &a[i][j]);
            if (a[i][j] == 1)
                id[j]++;
        }
    sort(a, id, n);
    if (k != n)
        printf("Topological ordering not possible\n");
    else {
        printf("Topological ordering is: ");
        for (int i = 0; i < k; i++)
            printf("%d ", temp[i]);
        printf("\n");
    }
    return 0;
}
-------------
6.#include <stdio.h>

int w[10], p[10], n;

int max(int a, int b) {
    return (a > b) ? a : b;
}

int knap(int i, int m) {
    if (i == n) return (w[i] > m) ? 0 : p[i];
    if (w[i] > m) return knap(i + 1, m);
    return max(knap(i + 1, m), knap(i + 1, m - w[i]) + p[i]);
}

int main() {
    int m, max_profit;
    printf("Enter the number of objects: ");
    scanf("%d", &n);
    printf("Enter the knapsack capacity: ");
    scanf("%d", &m);
    printf("Enter profit followed by weight:\n");
    for (int i = 0; i < n; i++)
        scanf("%d %d", &p[i], &w[i]);
    max_profit = knap(0, m);
    printf("Max profit = %d\n", max_profit);
    return 0;
}
--------------
7.#include <stdio.h>
#define MAX 50

int p[MAX], w[MAX], x[MAX];
double maxprofit;
int n, m;

void greedyKnapsack(int n, int w[], int p[], int m) {
    double ratio[MAX], temp;
    int i, j, temp2;

    for (i = 0; i < n; i++) ratio[i] = (double)p[i] / w[i];

    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (ratio[i] < ratio[j]) {
                temp = ratio[i]; ratio[i] = ratio[j]; ratio[j] = temp;
                temp2 = w[i]; w[i] = w[j]; w[j] = temp2;
                temp2 = p[i]; p[i] = p[j]; p[j] = temp2;
            }
        }
    }

    int currentWeight = 0;
    maxprofit = 0.0;

    for (i = 0; i < n; i++) {
        if (currentWeight + w[i] <= m) {
            x[i] = 1;
            currentWeight += w[i];
            maxprofit += p[i];
        } else {
            x[i] = (m - currentWeight) / (double)w[i];
            maxprofit += x[i] * p[i];
            break;
        }
    }

    printf("Optimal solution for greedy method: %.1f\n", maxprofit);
    printf("Solution vector for greedy method: ");
    for (i = 0; i < n; i++) printf("%d\t", x[i]);
}

int main() {
    printf("Enter the number of objects: ");
    scanf("%d", &n);
    printf("Enter the objects' weights and profits:\n");
    for (int i = 0; i < n; i++) scanf("%d %d", &w[i], &p[i]);
    printf("Enter the maximum capacity: ");
    scanf("%d", &m);
    greedyKnapsack(n, w, p, m);
    return 0;
}
----------
8.#include <stdio.h>
#define MAX 10

int s[MAX], x[MAX], d;

void sumofsub(int p, int k, int r) {
    x[k] = 1;
    if ((p + s[k]) == d) {
        for (int i = 1; i <= k; i++)
            if (x[i]) printf("%d ", s[i]);
        printf("\n");
    } else if (p + s[k] + s[k + 1] <= d) {
        sumofsub(p + s[k], k + 1, r - s[k]);
    }
    if ((p + r - s[k] >= d) && (p + s[k + 1] <= d)) {
        x[k] = 0;
        sumofsub(p, k + 1, r - s[k]);
    }
}

int main() {
    int n, sum = 0;
    printf("Enter n value: ");
    scanf("%d", &n);
    printf("Enter the set in increasing order: ");
    for (int i = 1; i <= n; i++) scanf("%d", &s[i]);
    printf("Enter the max subset value: ");
    scanf("%d", &d);
    for (int i = 1; i <= n; i++) sum += s[i];
    if (sum < d || s[1] > d)
        printf("No subset possible\n");
    else
        sumofsub(0, 1, sum);
    return 0;
}
-----++----------
9.#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void selectionSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        int min_idx = i;
        for (int j = i + 1; j < n; j++)
            if (arr[j] < arr[min_idx])
                min_idx = j;
        int temp = arr[min_idx];
        arr[min_idx] = arr[i];
        arr[i] = temp;
    }
}

void generateRandomNumbers(int arr[], int n) {
    for (int i = 0; i < n; i++)
        arr[i] = rand() % 10000;
}

int main() {
    int n;
    printf("Enter number of elements (> 5000): ");
    scanf("%d", &n);

    if (n <= 5000) {
        printf("Please enter a value greater than 5000\n");
        return 1;
    }

    int *arr = malloc(n * sizeof(int));
    if (!arr) {
        printf("Memory allocation failed\n");
        return 1;
    }

    generateRandomNumbers(arr, n);

    clock_t start = clock();
    selectionSort(arr, n);
    clock_t end = clock();

    printf("Time taken to sort %d elements: %f seconds\n", n, (double)(end - start) / CLOCKS_PER_SEC);

    free(arr);
    return 0;
}
-------
import matplotlib.pyplot as plt

# data collected
n_values = [6000, 7000, 8000, 9000, 10000]
time_taken = [0.031000, 0.034000, 0.047000, 0.052000, 0.077000]  # replace with actual times recorded

plt.plot(n_values, time_taken, marker='o')
plt.title('Selection Sort Time Complexity')
plt.xlabel('Number of Elements (n)')
plt.ylabel('Time taken (seconds)')
plt.grid(True)
plt.show()
--------++++--------++++++--
10.#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int* a, int* b) {
    int t = *a; *a = *b; *b = t;
}

int partition(int arr[], int low, int high) {
    int pivot = arr[high], i = low - 1;
    for (int j = low; j < high; j++)
        if (arr[j] < pivot) swap(&arr[++i], &arr[j]);
    swap(&arr[i + 1], &arr[high]);
    return i + 1;
}

void quickSort(int arr[], int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSort(arr, low, pi - 1);
        quickSort(arr, pi + 1, high);
    }
}

void generateRandomNumbers(int arr[], int n) {
    for (int i = 0; i < n; i++) arr[i] = rand() % 100000;
}

int main() {
    int n;
    printf("Enter number of elements (> 5000): ");
    scanf("%d", &n);

    if (n <= 5000) {
        printf("Please enter a value greater than 5000\n");
        return 1;
    }

    int *arr = (int *)malloc(n * sizeof(int));
    if (!arr) {
        printf("Memory allocation failed\n");
        return 1;
    }

    generateRandomNumbers(arr, n);

    clock_t start = clock();
    quickSort(arr, 0, n - 1);
    clock_t end = clock();

    printf("Time taken to sort %d elements: %f seconds\n", n, ((double)(end - start)) / CLOCKS_PER_SEC);

    free(arr);
    return 0;
}
-------++++---
11.#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void merge(int arr[], int l, int m, int r) {
    int n1 = m - l + 1, n2 = r - m, i, j, k;
    int *L = (int*)malloc(n1 * sizeof(int)), *R = (int*)malloc(n2 * sizeof(int));
    for (i = 0; i < n1; i++) L[i] = arr[l + i];
    for (j = 0; j < n2; j++) R[j] = arr[m + 1 + j];
    for (i = 0, j = 0, k = l; i < n1 && j < n2; k++) arr[k] = (L[i] <= R[j]) ? L[i++] : R[j++];
    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
    free(L); free(R);
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void generateRandomArray(int arr[], int n) {
    for (int i = 0; i < n; i++) arr[i] = rand() % 100000;
}

int main() {
    int n;
    printf("Enter the number of elements: ");
    scanf("%d", &n);
    if (n <= 5000) {
        printf("Please enter a value greater than 5000\n");
        return 1;
    }
    int *arr = (int*)malloc(n * sizeof(int));
    if (!arr) {
        printf("Memory allocation failed\n");
        return 1;
    }
    generateRandomArray(arr, n);
    clock_t start = clock();
    mergeSort(arr, 0, n - 1);
    clock_t end = clock();
    printf("Time taken to sort %d elements: %f seconds\n", n, ((double)(end - start)) / CLOCKS_PER_SEC);
    free(arr);
    return 0;
}
-------+++++++((((((+++--------
12.#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

void printSolution(int **board, int N) {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++) printf("%s ", board[i][j] ? "Q" : "#");
        printf("\n");
    }
}

bool isSafe(int **board, int N, int row, int col) {
    for (int i = 0; i < col; i++) if (board[row][i]) return false;
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--) if (board[i][j]) return false;
    for (int i = row, j = col; j >= 0 && i < N; i++, j--) if (board[i][j]) return false;
    return true;
}

bool solveNQUtil(int **board, int N, int col) {
    if (col >= N) return true;
    for (int i = 0; i < N; i++) {
        if (isSafe(board, N, i, col)) {
            board[i][col] = 1;
            if (solveNQUtil(board, N, col + 1)) return true;
            board[i][col] = 0;
        }
    }
    return false;
}

bool solveNQ(int N) {
    int **board = (int **)malloc(N * sizeof(int *));
    for (int i = 0; i < N; i++) {
        board[i] = (int *)malloc(N * sizeof(int));
        for (int j = 0; j < N; j++) board[i][j] = 0;
    }
    if (!solveNQUtil(board, N, 0)) {
        printf("Solution does not exist\n");
        for (int i = 0; i < N; i++) free(board[i]);
        free(board);
        return false;
    }
    printSolution(board, N);
    for (int i = 0; i < N; i++) free(board[i]);
    free(board);
    return true;
}

int main() {
    int N;
    printf("Enter the number of queens: ");
    scanf("%d", &N);
    solveNQ(N);
    return 0;
}
-----+++++++(((((()((((+++++++
